{"version":3,"sources":["components/Header.tsx","components/shared/index.tsx","components/Editor.tsx","components/Preview.tsx","components/Main.tsx","components/Footer.tsx","App.tsx","userDarkMode.js","serviceWorker.ts","index.tsx"],"names":["Header","theme","toggleTheme","css","className","onClick","ColumnFlex","styled","div","RowFlex","Editor","markdownContent","setMarkdownContent","id","onChange","e","target","value","rows","Preview","mardownFormattedContent","marked","dangerouslySetInnerHTML","__html","Main","useState","Footer","href","App","setTheme","useEffect","localTheme","localStorage","getItem","useDarkMode","themeStyles","backgroundColor","color","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"64BAaA,IAwCeA,EAxCiB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAExC,OACE,sBACEC,IAAe,SAAVF,EACLE,YADK,KAQHA,YARG,MAiBL,mBAAKC,UAAU,gBAAf,mBAGA,mBAAKD,IACHA,YADM,KAINE,QAASH,GAGE,SAAVD,EACA,YAAC,IAAD,MACA,YAAC,IAAD,S,qPC3CF,IAAMK,EAAaC,IAAOC,IAAV,KAIVC,EAAUF,IAAOC,IAAV,K,yiCCOpB,IAwDeE,EAxDiB,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,gBAAiBC,EAAgC,EAAhCA,mBAAoBX,EAAY,EAAZA,MACpE,OACI,YAACK,EAAD,CACAO,GAAG,SACHV,IAAKA,YAAF,MAIH,gCAGA,wBACEW,SAAU,SAACC,GAAD,OAAyCH,EAAmBG,EAAEC,OAAOC,QAC/Ed,IAAe,SAAVF,EACLE,YADK,KAiBHA,YAjBG,KA+BLe,KAAM,EACND,MAAON,M,+gCC7CjB,IAiDeQ,EAjDkB,SAAC,GAAgC,IAA9BR,EAA6B,EAA7BA,gBAAiBV,EAAY,EAAZA,MAC3CmB,EAA4BC,IAAOV,GAEzC,OACI,YAACL,EAAD,CACIO,GAAG,UACHV,IAAKA,YAAF,MAKH,iCACA,mBACIA,IAAe,SAAVF,EACHE,YADG,KAaHA,YAbG,KAyBTmB,wBAAyB,CAACC,OAAQH,O,wKCvC9C,IAyBeI,EAzBgB,SAAC,GAAe,IAAbvB,EAAY,EAAZA,MAAY,EACEwB,mBAAQ,8EADV,mBACrCd,EADqC,KACpBC,EADoB,KAY5C,OACE,YAACH,EAAD,CACEN,IAAKA,YAAF,MAKH,YAAC,EAAD,CAAQF,MAAOA,EAAOU,gBAAiBA,EAAiBC,mBAAoBA,IAC5E,YAAC,EAAD,CAASX,MAAOA,EAAOU,gBAAiBA,M,oWC3B9C,IAwBee,EAxBU,WAEvB,OACE,0BACE,mBACEtB,UAAU,qBACVD,IACIA,YADD,MAYJ,+BAAoB,iCAAY,iBAAGwB,KAAK,sBAAsBX,OAAO,UAArC,YAAZ,MAA6E,iBAAGW,KAAK,kCAAkCX,OAAO,UAAjD,kBCMzFY,MArBf,WAAgB,IAAD,ECPA,WAAO,IAAD,EACOH,mBAAS,SADhB,mBACZxB,EADY,KACL4B,EADK,KAkBnB,OAPAC,qBAAU,WACR,IAAMC,EAAaC,aAAaC,QAAQ,SACpCF,GACFF,EAASE,KAEV,IAEI,CACL9B,QACAC,YAjBkB,WAEhB2B,EADY,SAAV5B,EACO,QAEA,UDCkBiC,GAAvBjC,EADK,EACLA,MAAOC,EADF,EACEA,YACTiC,EAAwB,UAAVlC,EAAmB,CACrCmC,gBAAiB,OACjBC,MAAO,QACN,CACDD,gBAAiB,UACjBC,MAAO,QAET,OACE,yBACEjC,UAAU,MACVkC,MAAOH,GAEP,kBAAC,EAAD,CAAQlC,MAAOA,EAAOC,YAAaA,IACnC,kBAAC,EAAD,CAAMD,MAAOA,IACb,kBAAC,EAAD,QEbcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.928fcc3b.chunk.js","sourcesContent":["import React from 'react'\nimport { FiSun } from 'react-icons/fi'\nimport { FaMoon } from 'react-icons/fa'\n\n// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\n\ninterface Props {\n  toggleTheme: () => void,\n  theme: string\n}\n\nconst Header: React.FC<Props> = ({ theme, toggleTheme }) => {\n\n  return (\n    <header\n      css={theme === 'dark' ?\n      css`\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        background-color: #f89541;\n        padding: 24px 32px;\n        font-size: 16px;\n      `:css`\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        background-color: #f8f541;\n        padding: 24px 32px;\n        box-shadow: 0px -2px 8px #000;\n        font-size: 16px;\n    `}>\n      <div className=\"header-title\">\n        Markdown Editor\n      </div>\n      <div css={\n        css`\n          cursor: pointer;\n        `}\n        onClick={toggleTheme}\n      >\n       {\n         theme === 'dark'?\n         <FaMoon />:\n         <FiSun />\n       }\n      </div>\n    </header>\n  )\n}\n\nexport default Header;\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nexport const ColumnFlex = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nexport const RowFlex = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n","import React, { ChangeEvent } from 'react'\nimport PropTypes from 'prop-types';\n\n// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport { ColumnFlex } from './shared'\n\ninterface Props {\n  markdownContent: string;\n  setMarkdownContent: (value: string) => void,\n  theme: string\n}\n\nconst Editor: React.FC<Props> = ({ markdownContent, setMarkdownContent, theme }) => {\n    return (\n        <ColumnFlex\n        id=\"editor\"\n        css={css`\n            flex: 1;\n            padding: 16px;\n          `}>\n        <h2>\n        Editor\n        </h2>\n        <textarea\n          onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setMarkdownContent(e.target.value)}\n          css={theme === 'dark'?\n          css`\n            height: 100%;\n            border-radius: 4px;\n            border: none;\n            box-shadow: 0 -2px 10px rgba(0, 0, 0, 1);\n            background: #000;\n            color: #fff;\n            font-size: 100%;\n            line-height: inherit;\n            padding: 8px 16px;\n            resize: none;\n            overflow: auto;\n            &:focus {\n              outline: none;\n            }\n          `\n          : css`\n            height: 100%;\n            border-radius: 4px;\n            border: none;\n            box-shadow: 2px 2px 10px #999;\n            font-size: 100%;\n            line-height: inherit;\n            padding: 8px 16px;\n            resize: none;\n            overflow: auto;\n            &:focus {\n              outline: none;\n            }\n          `}\n          rows={9}\n          value={markdownContent}\n          />\n      </ColumnFlex>\n    )\n}\n\nEditor.propTypes = {\n  markdownContent: PropTypes.string.isRequired,\n  setMarkdownContent: PropTypes.func.isRequired,\n}\n\nexport default Editor;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport marked from 'marked'\n\n// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport { ColumnFlex } from './shared'\n\ninterface Props {\n    markdownContent: string,\n    theme: string\n}\n\nconst Preview: React.FC<Props> = ({ markdownContent, theme }) => {\n    const mardownFormattedContent = ( marked(markdownContent));\n\n    return (\n        <ColumnFlex\n            id=\"preview\"\n            css={css`\n            flex: 1;\n            padding: 16px;\n            `}\n        >\n            <h2>Preview</h2>\n            <div\n                css={theme === 'dark'\n                ? css`\n                height: 100%;\n                border-radius: 4px;\n                border: none;\n                box-shadow: 0 -2px 10px rgba(0, 0, 0, 1);\n                font-size: 100%;\n                line-height: inherit;\n                overflow: auto;\n                background: #000;\n                padding: 8px 16px;\n                color: #fff;\n                `\n                : css`\n                height: 100%;\n                border-radius: 4px;\n                border: none;\n                box-shadow: 2px 2px 10px #999;\n                font-size: 100%;\n                line-height: inherit;\n                overflow: auto;\n                background: #fff;\n                padding: 8px 16px;\n                color: #000;\n            `}\n            dangerouslySetInnerHTML={{__html: mardownFormattedContent}}\n            >\n            </div>\n        </ColumnFlex>\n    )\n}\n\nPreview.propTypes = {\n    markdownContent: PropTypes.string.isRequired\n  }\n\nexport default Preview;","import React, { useState } from 'react'\n\n// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport { RowFlex } from './shared'\nimport Editor from './Editor';\nimport Preview from './Preview';\n\ninterface Props {\n  theme: string\n}\n\nconst Main: React.FC<Props> =  ({ theme }) => {\n  const [markdownContent, setMarkdownContent] = useState<string>(`\n# H1\n## H2\n### H3\n#### H4\n##### H5\n\n__bold__\n**bold**\n_italic_\n`);\n  return (\n    <RowFlex\n      css={css`\n        padding: 32px;\n        padding-top: 0px;\n        height: calc(100vh - 170px);\n        `}>\n      <Editor theme={theme} markdownContent={markdownContent} setMarkdownContent={setMarkdownContent}/>\n      <Preview theme={theme} markdownContent={markdownContent}/>\n    </RowFlex>\n  )\n}\n\nexport default Main;\n","import React from 'react'\n\n// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\n\nconst Footer: React.FC = () => {\n\n  return (\n    <footer>\n      <div \n        className=\"footer-description\"\n        css={\n            css`\n                padding: 16px 0px;\n                overflow: hidden;\n                position: absolute;\n                width: 100%;\n                text-align: center;\n                bottom: 0px;\n                color: #f89541;\n                background: #000;\n            `\n        }>\n       <span>{`</>`}</span><span> with <a href=\"https://reactjs.org\" target=\"_blank\">React.js</a> &amp; <a href=\"https://www.typescriptlang.org/\" target=\"_blank\">TypeScript</a></span>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React from 'react'\nimport { css, jsx } from '@emotion/core'\n\n// Components\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport Footer from './components/Footer';\nimport useDarkMode from './userDarkMode';\n\nfunction App() {\n  const { theme, toggleTheme } = useDarkMode();\n  const themeStyles = theme === 'light'? {\n    backgroundColor: '#eee',\n    color: '#000'\n  }: {\n    backgroundColor: '#171616',\n    color: '#fff'\n  }\n  return (\n    <div \n      className=\"App\"\n      style={themeStyles}\n      >\n      <Header theme={theme} toggleTheme={toggleTheme}/>\n      <Main theme={theme}/>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react'\n\nexport default () => {\n  const [theme, setTheme] = useState('light')\n\n  const toggleTheme = () => {\n    if (theme === 'dark') {\n      setTheme('light')\n    } else {\n      setTheme('dark')\n    }\n  }\n\n  useEffect(() => {\n    const localTheme = localStorage.getItem('theme')\n    if (localTheme) {\n      setTheme(localTheme)\n    }\n  }, [])\n\n  return {\n    theme,\n    toggleTheme,\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}